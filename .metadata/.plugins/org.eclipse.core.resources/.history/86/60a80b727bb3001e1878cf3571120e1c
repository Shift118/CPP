#include <iostream>
using namespace std;

struct Node {
	int val;
	int priority;
	Node* next;
};

void enqueue(Node *& head,int priority,int val){
	Node * newHead = new Node;
	newHead -> val = val;
	newHead -> priority = priority;
	newHead -> next = NULL;
	if(!head){
		head = newHead;
	}else if(head -> priority < priority){
		newHead -> next = head;
		head = newHead;
	}else if(head -> priority > priority){
		Node * temp = head;
		while (temp -> next && temp -> next -> priority > priority){
			temp = temp -> next;
		}
		newHead -> next = temp -> next;
		temp -> next = newHead;
	}
}

void dequeue(Node *& head){
	if (!head) {
			cout << "Nothing to dequeue";
			return;
	}else{
		Node * temp = head;
		head = head -> next;
		cout << endl<<"Dequeued: "<<temp ->val;
		delete temp;
		temp = NULL;
	}
}

void displayQueue(Node * head){
	cout <<endl<< "Queue: ";
	if (!head) {
		cout << "Is Empty!";
		return;
	}
	Node * temp = head;
	while (temp){
		cout << temp -> val << " -> ";
		temp = temp -> next;
	}
}

int countQueue(Node * head){
	if (!head){
		cout << endl << " Queue is Empty !";
		return 0;
	}else{
		int count = 0;
		Node * temp = head;
			while (temp){
				count++;
				temp = temp -> next;
		}
	}
}


int main() {
	Node * head = NULL;
	enqueue(head, 90, 9);
	enqueue(head, 50, 1);
	enqueue(head, 70, 3);
	enqueue(head, 80, 6);
	enqueue(head, 60, 2);
	enqueue(head, 100, 10);
	displayQueue(head);
	dequeue(head);
	displayQueue(head);
	return 0;
}
